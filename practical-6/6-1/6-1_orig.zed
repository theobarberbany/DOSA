\documentclass{article}
\usepackage[margin=0.25in]{geometry}
\usepackage{czt}

\begin{document}
The Definition of CHARS is interesting. It defines a 'token'\\
EOF and then all applications of the function Other to the type ORDINARY.\\
This is, by specification of the Z notation an injective function.
\begin{zed}
  [ORDINARY]\\
  CHARS ::= EOF | Other\ldata ORDINARY\rdata\\
  STATE ::= READ | WRITE
\end{zed}

\begin{schema}{File}
  content: \seq CHARS\\
  state: STATE\\
  position: \nat
\where
  last~ content = EOF\\
  \# ( content \filter \{EOF\}) = 1
\end{schema}

\begin{schema}{FileInit}
  File~'
\where
  content' = \langle \rangle\\
  state' = WRITE
\end{schema}

\begin{schema}{Overwrite}
  \Delta File\\
  in?: \seq CHARS
\where
  state = WRITE\\
  content' = in?\\
  state' = state
\end{schema}

\begin{schema}{Append}
  \Delta File\\
  in?: ORDINARY
\where
  state = WRITE\\
  content' = content \cat \langle Other(in?) \rangle\\
  state' = state
\end{schema}

If a user tries to reopen an open file it will not reset the read position.
\begin{schema}{Open}
  \Delta File
  \where
  state = WRITE \implies state' = READ \land position' = 0\\
  state = READ \implies state' = state \land position' = position\\
  content' = content\\
\end{schema}

\begin{schema}{Close}
  \Delta File
  \where
  state' = WRITE\\
  content' = content  
\end{schema}

I think this should work, however if there is an EOF (somehow) in\\
the middle of the file it will not read beyond there. Using the domain of\\
the sequence (1,2,3...n) to do this is more elegant.
\begin{schema}{ReadChar}
  \Delta File\\
  out!: CHARS
  \where
  state = READ\\
  content' = content\\
  state' = state\\
  \IF content~ position = EOF \THEN out! = EOF \land position' = position \\
  \t2 \ELSE~ out! = content~ position \land position' = position + 1 
\end{schema}



\end{document}