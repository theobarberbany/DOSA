\documentclass{article}
\usepackage[margin=0.5in]{geometry}
\usepackage{czt}

\begin{document}
\begin{zed}
  [CHAR]\\
  STATE ::= READ | WRITE\\
  RESPONSE ::= OK | FILE\_WRONG\_MODE
\end{zed}
\begin{axdef}
  EOF: CHAR
\end{axdef}
\begin{zed}
STRING == seq~ (CHAR \setminus \{EOF\})

\end{zed}
\begin{schema}{File}
  content: STRING \\
  state: STATE\\
  position: \nat
\end{schema}

\begin{zed}
WriteFail == [\Xi File; resp!: RESPONSE \setminus \{OK\}| state = READ \implies resp! = FILE\_WRONG\_MODE]\\
ReadFail == [\Xi File; resp!: RESPONSE \setminus \{OK\} | state = WRITE \implies resp! = FILE\_WRONG\_MODE]
\end{zed}

\begin{schema}{FileInit}
  File~'
\where
  content' = \langle \rangle\\
  state' = WRITE
\end{schema}

\begin{schema}{Overwrite}
  \Delta File\\
  in?: STRING
\where
  state = WRITE\\
  content' = in?\\
  state' = state
\end{schema}

Note \"[Overwrite; resp!: \{OK\}]" could be replaced with a more general \\
'OK' Schema, and ANDED with the rest of the Total schema. However I think the\\
way below potentially illustrates what's going on better.

\begin{zed}
OverwriteTotal == [Overwrite; resp!: \{OK\}] \lor WriteFail
\end{zed}


\begin{schema}{Append}
  \Delta File\\
  in?: CHAR \setminus \{EOF\}
\where
  state = WRITE\\
  content' = content \cat \langle in? \rangle\\
  state' = state
\end{schema}

\begin{zed}
AppendTotal == [Append; resp!: \{OK\}] \lor WriteFail
\end{zed}

If a user tries to reopen an open file it will not reset the read position.
\begin{schema}{Open}
  \Delta File
  \where
  state = WRITE \implies state' = READ \land position' = 0\\
  state = READ \implies state' = state \land position' = position\\
  content' = content
\end{schema}

\begin{zed}
OpenTotal == [Open; resp!: \{OK\}] \lor WriteFail
\end{zed}

\begin{schema}{ReadChar}
  \Delta File\\
  out!: CHAR
  \where
  state = READ\\
  content' = content\\
  state' = state\\
  position \in dom~ content \implies out! = content~ position \land position' = position + 1\\
  position \notin dom~content \implies out! = EOF \land position' \notin dom~content 
\end{schema}

\begin{zed}
ReadCharTotal == [ReadChar; resp!: \{OK\}] \lor ReadFail
\end{zed}

\begin{schema}{Close}
  \Delta File
  \where
  state = READ\\
  state' = WRITE\\
  content' = content  
\end{schema}

\begin{zed}
CloseTotal == [Close; resp!: \{OK\}] \lor ReadFail\\\\\\
[LOC]\\
FileSystem == [files: LOC \pfun File]
\end{zed}

A filesystem is a partial function between Locations (inodes?) and Files, as defined above.\\
Currently it's got unlimited size. 
\begin{schema}{Promote}
  \Delta FileSystem\\
  \Delta File\\
  loc?: LOC
\where
  loc? \in dom~ files\\
  files~ loc? = \theta File\\
  files' = files \oplus \{loc? \mapsto \theta File~'\}
\end{schema}

To create a new file, we need to Initialise some anonymous file with a location (name). \\
It must not already exist. We add it to the files map.
\begin{zed}
NewFilePrelim == [\Delta FileSystem; FileInit; loc?: LOC | loc? \notin dom~ files; files' = files \oplus \{loc? \mapsto \theta File~'\}]\\
NewFile == \exists File~' @ NewFilePrelim
\end{zed}

We can delete a file, if it exists. We use domain substraction so we only need to specify\\
the name, and not the name (loc?) and not loc? and the 'File' it maps to.
\begin{zed}
DeleteFile == [\Delta FileSystem; loc?: LOC | loc? \in dom~ files; files' = \{loc?\} \ndres files]\\

OverwriteFile == \exists \Delta File @ Promote \land OverwriteTotal\\
AppendFile == \exists \Delta File @ Promote \land AppendTotal\\
OpenFile == \exists \Delta File @ Promote \land OpenTotal\\
ReadCharFile == \exists \Delta File @ Promote \land ReadCharTotal\\
CloseFile == \exists \Delta File @ Promote \land CloseTotal

\end{zed}
\end{document}